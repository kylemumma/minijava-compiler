/**
 * CUP specification of the language grammar for a simple demo language.
 * Change this into the language grammar of MiniJava for your implementation.
 *
 * CSE 401/M501/P501 19au, 20sp
 */

package Parser;

import AST.*;
import java.util.*;
import java_cup.runtime.*;

/* Terminals (lexical tokens returned by the scanner): */

/* reserved words */
terminal CLASS;
terminal PUBLIC;
terminal STATIC;
terminal VOID;
terminal MAIN;
terminal STRING;
terminal EXTENDS;
terminal RETURN;
terminal INT;
terminal BOOLEAN;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal PRINT;
terminal TRUE;
terminal FALSE;
terminal THIS;
terminal NEW;
terminal LENGTH;

/* operators */
terminal PLUS, BECOMES;
terminal AND, NOT;
terminal LESSTHAN;
terminal MINUS, TIMES;

/* delimiters */
terminal LPAREN, RPAREN;
terminal LBRACK, RBRACK;
terminal LCURLY, RCURLY;
terminal SEMICOLON, COMMA, DOT;

/* identifiers */
terminal String IDENTIFIER;
terminal Integer INTEGER_LITERAL;


/* Nonterminals (constructed by parser): */

/* ------------ OLD NONTERMINALS --------------
non terminal List<Statement> Program;
non terminal Statement Statement;
non terminal Assign AssignStatement;
non terminal Exp Expression;
non terminal Identifier Identifier;
*/
// todo: add types to these, corresponding to the AST node type for the given
// production (i think)
non terminal Program Goal;
non terminal MainClass MainClass;

non terminal ClassDeclList ClassDeclList;
non terminal ClassDeclList NonEmptyClassDeclList;
non terminal ClassDecl ClassDecl;
non terminal ClassDeclSimple ClassDeclSimple;
non terminal ClassDeclExtends ClassDeclExtends;

non terminal Type Type;

non terminal VarDeclList VarDeclList;
non terminal VarDeclList NonEmptyVarDeclList;
non terminal VarDecl VarDecl;

non terminal MethodDeclList MethodDeclList;
non terminal MethodDeclList NonEmptyMethodDeclList;
non terminal MethodDecl MethodDecl;

non terminal FormalList FormalList;
non terminal Formal Formal;

non terminal Exp Expression;
non terminal ExpList ExpressionList;

non terminal Identifier Identifier;

non terminal StatementList StatementList;
non terminal StatementList NonEmptyStatementList;
non terminal Statement Statement;

// why is this a nonterm in the minijava grammar,
// do i need this, do i need 1 for int-literal?
// non terminal Identifier;

/* Precedence declarations: */
// todo: precendence
precedence left AND;
precedence left LESSTHAN;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left NEW;
precedence left NOT;
precedence left LPAREN, RPAREN, LBRACK, RBRACK, DOT;

/* Productions: */
/* ----------- OLD PRODUCTIONS ------------
Program ::= Statement:s
            {: List<Statement> p = new LinkedList<Statement>();
               p.add(s);
               RESULT = p; :}
        | Program:p Statement:s
            {: p.add(s); RESULT = p; :};

Statement   ::= AssignStatement:s
                {: RESULT = s; :};

AssignStatement ::= Identifier:id BECOMES Expression:expr SEMICOLON
                    {: RESULT = new Assign(id, expr, idxleft); :};

Identifier  ::= IDENTIFIER:id
                {: RESULT = new Identifier(id, idxleft); :};

Expression    ::= IDENTIFIER:name
            {: RESULT = new IdentifierExp(name, namexleft); :}
        | Expression:arg1 PLUS Expression:arg2
            {: RESULT = new Plus(arg1, arg2, arg1xleft); :}
        | LPAREN Expression:expr RPAREN
            {: RESULT = expr; :};
*/

Goal ::= MainClass:c ClassDeclList:c1;
//{: RESULT = new Program(c, c1, cxleft); :};

MainClass ::= CLASS Identifier:i1 LCURLY PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK Identifier:i2 RPAREN LCURLY Statement:s RCURLY RCURLY
{: RESULT = new MainClass(i1, i2, s, i1xleft); :};

ClassDeclList ::= NonEmptyClassDeclList | /* epsilon */;
NonEmptyClassDeclList ::= ClassDecl | NonEmptyClassDeclList ClassDecl;
ClassDecl ::= ClassDeclSimple:cd
                {: RESULT = cd; :}
            | ClassDeclExtends:cd
                {: RESULT = cd; :};
ClassDeclSimple ::= CLASS:f Identifier:id LCURLY VarDeclList:vdl MethodDeclList:mdl RCURLY
                    {: RESULT = new ClassDeclSimple(id, vdl, mdl, fxleft); :};
ClassDeclExtends ::= CLASS:f Identifier:id1 EXTENDS Identifier:id2 LCURLY VarDeclList:vdl MethodDeclList:mdl RCURLY
                    {: RESULT = new ClassDeclExtends(id1, id2, vdl, mdl, fxleft); :};

VarDeclList ::= VarDeclList:vdl VarDecl:vd
                {: if (vdl.size() == 0) vdl = new VarDeclList(vdxleft);
                vdl.add(vd); 
                RESULT = vdl; :}
            | /* epsilon */
                {: RESULT = new VarDeclList(new Location(-1,-1)); :};

VarDecl ::= Type:t Identifier:id SEMICOLON
            {: RESULT = new VarDecl(t, id, txleft); :};

MethodDeclList ::=  NonEmptyMethodDeclList:mdl
                    {: RESULT = mdl; :}
                | /* epsilon */
                    {: RESULT = new MethodDeclList(new Location(-1,-1)); :};
NonEmptyMethodDeclList ::= MethodDecl:md
                            {: MethodDeclList mdl = new MethodDeclList(mdxleft);
                            mdl.add(md);
                            RESULT = mdl; :}
                        | NonEmptyMethodDeclList:mdl MethodDecl:md
                            {: mdl.add(md); RESULT = mdl; :};
MethodDecl ::= PUBLIC:f Type:t Identifier:id LPAREN FormalList:fl RPAREN LCURLY VarDeclList:vdl StatementList:sl RETURN Expression:e SEMICOLON RCURLY
                {: RESULT = new MethodDecl(t, id, fl, vdl, sl, e, fxleft); :};

FormalList ::= Formal:f
                {: FormalList fl = new FormalList(fxleft);
                    fl.add(f);
                    RESULT = fl; :}
            | FormalList:fl COMMA Formal:f
                {: fl.add(f); RESULT = fl; :}
            | /* epsilon */
                {: RESULT = new FormalList(new Location(-1,-1)); :};

Formal ::= Type:t Identifier:id
            {: RESULT = new Formal(t, id, txleft); :};

StatementList ::= NonEmptyStatementList:sl
                    {: RESULT = sl; :}
                | /* epsilon */
                    {: RESULT = new StatementList(new Location(-1,-1)); :};

NonEmptyStatementList ::= Statement:s
                            {: StatementList sl = new StatementList(sxleft);
                            sl.add(s); 
                            RESULT = sl; :}
                        | NonEmptyStatementList:sl Statement:s
                            {: sl.add(s); RESULT = sl; :};

Statement ::= LCURLY:f StatementList:sl RCURLY 
                {: RESULT = new Block(sl, fxleft); :}
            | IF:f LPAREN Expression:e RPAREN Statement:s1 ELSE Statement:s2
                {: RESULT = new If(e, s1, s2, fxleft); :}
            | WHILE:f LPAREN Expression:e RPAREN Statement:s
                {: RESULT = new While(e, s, fxleft); :}
            | PRINT:f LPAREN Expression:e RPAREN SEMICOLON
                {: RESULT = new Print(e, fxleft); :}
            | Identifier:id BECOMES Expression:e SEMICOLON
                {: RESULT = new Assign(id, e, idxleft); :}
            | Identifier:id LBRACK Expression:e1 RBRACK BECOMES Expression:e2 SEMICOLON
                {: RESULT = new ArrayAssign(id, e1, e2, idxleft); :};

Type ::= INT:t LBRACK RBRACK
            {: RESULT = new IntArrayType(txleft); :}
        | BOOLEAN:t
            {: RESULT = new BooleanType(txleft); :}
        | INT:t
            {: RESULT = new IntegerType(txleft); :}
        | IDENTIFIER:t
            {: RESULT = new IdentifierType(t, txleft); :};

ExpressionList ::= Expression:e
                    {: ExpList el = new ExpList(exleft);
                        el.add(e); 
                        RESULT = el; :}
                | ExpressionList:el COMMA Expression:e
                    {: el.add(e); RESULT = el; :}
                | /* epsilon */
                    {: RESULT = new ExpList(new Location(-1,-1)); :};

Expression ::= Expression:e1 TIMES Expression:e2
                {: RESULT = new Times(e1, e2, e1xleft); :}
            | Expression:e1 MINUS Expression:e2
                {: RESULT = new Minus(e1, e2, e1xleft); :}
            | Expression:e1 PLUS Expression:e2
                {: RESULT = new Plus(e1, e2, e1xleft); :}
            | Expression:e1 LESSTHAN Expression:e2
                {: RESULT = new LessThan(e1, e2, e1xleft); :}
            | Expression:e1 AND Expression:e2
                {: RESULT = new And(e1, e2, e1xleft); :}
            | Expression:e1 LBRACK Expression:e2 RBRACK
                {: RESULT = new ArrayLookup(e1, e2, e1xleft); :}
            | Expression:e1 DOT LENGTH
                {: RESULT = new ArrayLength(e1, e1xleft); :}
            | Expression:e1 DOT Identifier:id LPAREN ExpressionList:e2 RPAREN
                {: RESULT = new Call(e1, id, e2, e1xleft); :}
            | INTEGER_LITERAL:e
                {: RESULT = new IntegerLiteral(e, exleft); :}
            | TRUE:e
                {: RESULT = new True(exleft); :}
            | FALSE:e
                {: RESULT = new False(exleft); :}
            | IDENTIFIER:id
                {: RESULT = new IdentifierExp(id, idxleft); :}
            | THIS:e
                {: RESULT = new This(exleft); :}
            | NEW:n INT LBRACK Expression:e RBRACK
                {: RESULT = new NewArray(e, nxleft); :}
            | NEW:n Identifier:id LPAREN RPAREN
                {: RESULT = new NewObject(id, nxleft); :}
            | NOT:n Expression:e
                {: RESULT = new Not(e, nxleft); :}
            | LPAREN Expression:e RPAREN
                {: RESULT = e; :};

Identifier ::= IDENTIFIER:id
                {: RESULT = new Identifier(id, idxleft); :};